// File: get_next_line.c
/* ************************************************************************** */

#include "get_next_line.h"

static void	safe_free(char **ptr)
{
	if (ptr != NULL && *ptr != NULL)
	{
		free(*ptr);
		*ptr = NULL;
	}
}

static char	*find_newline(char **st_arr)
{
	char	*temp;
	int		len;
	char	*line;

	temp = ft_strchr_len(*st_arr, '\n');
	if (temp)
		len = temp - *st_arr + 1;
	else
		len = ft_strlen(*st_arr);
	line = malloc(sizeof(char) * (len + 1));
	if (!line)
		return (NULL);
	ft_memmove(line, *st_arr, len);
	line[len] = '\0';
	if (temp)
		ft_memmove(*st_arr, temp +1, ft_strlen(temp + 1) + 1);
	else
		safe_free(&*st_arr);
	return (line);
}

static int read_fd(int fd, char **st_arr)
{
    char    *buf;
    int     count_bytes;
    char    *st_arr_temp;

    buf = (char *)malloc(sizeof(char) * (BUFFER_SIZE + 1));
    if (!buf)
        return (-1);
    while (1)
    {
        count_bytes = read(fd, buf, BUFFER_SIZE);
        if (count_bytes < 0)
            return (free(buf), -1);
        if (count_bytes == 0)
            break;
        buf[count_bytes] = '\0';
        st_arr_temp = *st_arr;
        *st_arr = ft_strnjoin(*st_arr, buf, count_bytes);
        if (*st_arr == NULL)
            return (safe_free(&st_arr_temp), free(buf), -1);
        free(st_arr_temp);
        if (ft_strchr_len(*st_arr, '\n'))
            break;
    }
    free(buf);
    return (0);
}


char	*get_next_line(int fd)
{
	static char	*st_arr[FD_MAX];
	char		*line;
	int			ret;

	if (fd < 0 || fd >= FD_MAX || BUFFER_SIZE <= 0)
		return (NULL);
	if (st_arr[fd] == NULL)
		st_arr[fd] = ft_strdup("");
	if (st_arr[fd] == NULL)
		return (NULL);
	ret = read_fd(fd, &st_arr[fd]);
	if (ret < 0 || *st_arr[fd] == '\0')
	{
		safe_free(&st_arr[fd]);
		return (NULL);
	}
	line = find_newline(&st_arr[fd]);
	if (line == NULL)
	{
		safe_free(&st_arr[fd]);
		return (NULL);
	}
	return (line);
}

int	main()
{
	int	fd;
	char	*line;

	fd = open("test.txt", O_RDONLY);
	if (fd == -1)
	{
		perror("faild to open file");
		return (1);
	}
	while ((line = get_next_line(fd)) != NULL)
	{
		printf("%s", line);
		free(line);
		line = NULL;
	}
	if (close(fd) == -1)
	{
		perror("failed to close file");
		return (1);
	}
	return (0);
}

// File: get_next_line_utils.c
/* ************************************************************************** */

#include "get_next_line.h"

void	*ft_memmove(void *dest, const void *src, size_t n)
{
	const char	*s;
	char		*d;

	s = src;
	d = dest;
	if (d < s)
	{
		while (n--)
			*d++ = *s++;
	}
	else if (d > s)
	{
		d += (n - 1);
		s += (n - 1);
		while (n--)
			*d-- = *s--;
	}
	return (dest);
}

char	*ft_strnjoin(char const *s1, char const *s2, int n)
{
	size_t		s1_len;
	char		*result;
	size_t		i;
	size_t		j;

	if (s1 == NULL || s2 == NULL)
		return (NULL);
	s1_len = ft_strlen(s1);
	result = (char *)malloc(s1_len + n + 1);
	if (result == NULL)
		return (NULL);
	i = 0;
	while (s1[i] != '\0')
	{
		result[i] = s1[i];
		i++;
	}
	j = 0;
	while (s2[j] != '\0')
	{
		result[i++] = s2[j++];
	}
	result[i] = '\0';
	return (result);
}

size_t	ft_strlen(const char *str)
{
	size_t	length;

	length = 0;
	while (*str != '\0')
	{
		length++;
		str++;
	}
	return (length);
}

char	*ft_strchr_len(const char *str, int c)
{
	int	i;

	i = 0;
	while (*str != '\0')
	{
		if (*str == (char)c)
			return ((char *)str);
		str++;
		i++;
	}
	return (NULL);
}

char	*ft_strdup(const char *src)
{
	size_t	len;
	char	*dest;
	char	*ptr;

	len = ft_strlen(src);
	dest = (char *)malloc(len + 1);
	if (dest == NULL)
		return (NULL);
	ptr = dest;
	while (*src != '\0')
	{
		*ptr = *src;
		ptr++;
		src++;
	}
	*ptr = '\0';
	return (dest);
}


// File: get_next_line.h
/* ************************************************************************** */

#ifndef GET_NEXT_LINE_H
# define GET_NEXT_LINE_H

# include <unistd.h>
# include <stdlib.h>
# include <stdio.h>
# include <fcntl.h>

# ifndef BUFFER_SIZE
#  define BUFFER_SIZE 1
# endif

# ifndef FD_MAX
#  define FD_MAX 4096
# endif

char		*get_next_line(int fd);
char		*ft_strnjoin(char const *s1, char const *s2, int n);
char		*ft_strchr_len(const char *str, int c);
size_t		ft_strlen(const char *str);
char		*ft_strdup(const char *src);
void		*ft_memmove(void *dest, const void *src, size_t n);

#endif


